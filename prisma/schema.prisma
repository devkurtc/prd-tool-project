// Prisma Schema for PRD Tool - Production Version
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  password    String    // Hashed password
  avatarUrl   String?   @map("avatar_url")
  isActive    Boolean   @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  prds         PRD[]          @relation("UserPRDs")
  collaborations Collaborator[]
  comments     Comment[]
  activities   Activity[]
  sessions     Session[]

  @@map("users")
}

model PRD {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   @default("")
  status      String   @default("DRAFT") // DRAFT, REVIEW, APPROVED, ARCHIVED
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Author relationship
  authorId String @map("author_id")
  author   User   @relation("UserPRDs", fields: [authorId], references: [id], onDelete: Cascade)

  // Relations
  versions      PRDVersion[]
  collaborators Collaborator[]
  comments      Comment[]
  activities    Activity[]
  aiInteractions AIInteraction[]

  @@map("prds")
}

model PRDVersion {
  id        String   @id @default(cuid())
  version   Int
  content   String
  changeLog String?  @map("change_log")
  createdAt DateTime @default(now()) @map("created_at")
  
  // PRD relationship
  prdId String @map("prd_id")
  prd   PRD    @relation(fields: [prdId], references: [id], onDelete: Cascade)
  
  // Author
  authorId String @map("author_id")
  
  @@unique([prdId, version])
  @@map("prd_versions")
}

// Session management for authentication
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

// Collaboration
model Collaborator {
  id        String   @id @default(cuid())
  role      String   @default("VIEWER") // VIEWER, EDITOR, ADMIN
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  prdId String @map("prd_id")
  prd   PRD    @relation(fields: [prdId], references: [id], onDelete: Cascade)
  
  @@unique([userId, prdId])
  @@map("collaborators")
}

// Comments
model Comment {
  id        String   @id @default(cuid())
  content   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  prdId String @map("prd_id")
  prd   PRD    @relation(fields: [prdId], references: [id], onDelete: Cascade)
  
  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])
  
  @@map("comments")
}

// Activity tracking
model Activity {
  id        String   @id @default(cuid())
  type      String   // CREATED, UPDATED, COMMENTED, SHARED, etc.
  metadata  Json?    // Additional activity-specific data
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  
  prdId String @map("prd_id")
  prd   PRD    @relation(fields: [prdId], references: [id], onDelete: Cascade)
  
  @@index([prdId, createdAt])
  @@map("activities")
}

// AI Interactions
model AIInteraction {
  id         String   @id @default(cuid())
  prompt     String
  response   String
  model      String   // gpt-4, claude-3, etc.
  tokens     Int      // Token count for cost tracking
  costCents  Float    // Cost in cents
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  prdId String @map("prd_id")
  prd   PRD    @relation(fields: [prdId], references: [id], onDelete: Cascade)
  
  @@index([prdId, createdAt])
  @@map("ai_interactions")
}