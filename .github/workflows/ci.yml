name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        npx prisma migrate deploy --schema=./prisma/schema.prisma
        
    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-for-testing
        NODE_ENV: test
      run: npm test
      
    - name: Generate test coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-for-testing
        NODE_ENV: test
      run: npm run test:coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test run
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        npx prisma migrate deploy --schema=./prisma/schema.prisma
        
    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-for-testing
        NODE_ENV: test
        PORT: 3001
      run: |
        npm start &
        sleep 10
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        
        # Test Swagger docs
        curl -f http://localhost:3001/api-docs/ || exit 1
        
        # Test registration
        curl -X POST http://localhost:3001/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","name":"Test User","password":"password123"}' \
          -f || exit 1